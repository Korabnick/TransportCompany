#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.calculator import ZoneDistanceService
from app.config_manager import config_manager

def test_zone_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω ===")
    
    test_addresses = [
        ("–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "city"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 100, –°–ü–±", "city"),
        ("–ö–ê–î, 50 –∫–º, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "outside"),
        ("–ö–æ–ª—å—Ü–µ–≤–∞—è –∞–≤—Ç–æ–¥–æ—Ä–æ–≥–∞, 25 –∫–º", "outside"),
        ("–ü—É—à–∫–∏–Ω, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "outside"),
        ("–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä–µ—Ü, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "city"),
    ]
    
    for address, expected_zone in test_addresses:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if "—Å–ø–±" in address.lower() or "–ø–µ—Ç–µ—Ä–±—É—Ä–≥" in address.lower():
            coords = {"lat": 59.9311, "lng": 30.3609}
        elif "–æ–±–ª–∞—Å—Ç—å" in address.lower() or "–∫–∞–¥" in address.lower() or "–∫–æ–ª—å—Ü–µ–≤–∞—è" in address.lower():
            coords = {"lat": 60.0, "lng": 30.5}
        else:
            coords = {"lat": 59.95, "lng": 30.35}
        
        zone = ZoneDistanceService._determine_zone(coords, address)
        status = "‚úÖ" if zone == expected_zone else "‚ùå"
        print(f"{status} {address} -> {zone} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_zone})")

def test_route_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ===")
    
    test_routes = [
        ("–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 100", "city_only"),
        ("–ö–ê–î, 50 –∫–º", "–ö–æ–ª—å—Ü–µ–≤–∞—è –∞–≤—Ç–æ–¥–æ—Ä–æ–≥–∞, 25 –∫–º", "outside_only"),
        ("–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1", "–ü—É—à–∫–∏–Ω, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "mixed"),
        ("–ü–µ—Ç—Ä–æ–¥–≤–æ—Ä–µ—Ü", "–ö–ê–î, 30 –∫–º", "mixed"),
    ]
    
    for from_addr, to_addr, expected_type in test_routes:
        analysis = ZoneDistanceService.get_distance_with_zones(from_addr, to_addr)
        status = "‚úÖ" if analysis['route_type'] == expected_type else "‚ùå"
        print(f"{status} {from_addr} -> {to_addr}")
        print(f"   –¢–∏–ø: {analysis['route_type']} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_type})")
        print(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {analysis['total_distance']} –∫–º")
        print(f"   –ü–æ –≥–æ—Ä–æ–¥—É: {analysis['city_distance']} –∫–º")
        print(f"   –ó–∞ –ö–ê–î: {analysis['outside_distance']} –∫–º")
        print(f"   –ö–ê–î: {'–î–∞' if analysis['kad_toll_applied'] else '–ù–µ—Ç'}")

def test_pricing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ===")
    
    test_cases = [
        ("–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 100", 2, False),
        ("–ö–ê–î, 50 –∫–º", "–ö–æ–ª—å—Ü–µ–≤–∞—è –∞–≤—Ç–æ–¥–æ—Ä–æ–≥–∞, 25 –∫–º", 3, True),
        ("–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1", "–ü—É—à–∫–∏–Ω, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 4, False),
    ]
    
    for from_addr, to_addr, duration, urgent in test_cases:
        analysis = ZoneDistanceService.get_distance_with_zones(from_addr, to_addr)
        pricing = ZoneDistanceService.calculate_route_price_with_zones(analysis, duration, urgent)
        
        print(f"\nüìç {from_addr} -> {to_addr}")
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á, –°—Ä–æ—á–Ω–æ: {'–î–∞' if urgent else '–ù–µ—Ç'}")
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ–¥—É: {pricing['city_cost']} ‚ÇΩ")
        print(f"üõ£Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ö–ê–î: {pricing['outside_cost']} ‚ÇΩ")
        print(f"‚è∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏: {pricing['duration_cost']} ‚ÇΩ")
        if pricing['kad_cost'] > 0:
            print(f"üöß –°—Ç–æ–∏–º–æ—Å—Ç—å –ö–ê–î: {pricing['kad_cost']} ‚ÇΩ")
        print(f"üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {pricing['base_total_cost']} ‚ÇΩ")
        if urgent:
            print(f"‚ö° –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {pricing['urgent_multiplier']}x")
        print(f"üí≥ –ò—Ç–æ–≥–æ: {pricing['total']} ‚ÇΩ")

def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    pricing = config_manager.get_pricing()
    print(f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–º: {pricing.get('base_cost_per_km')} ‚ÇΩ")
    print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –∫–º: {pricing.get('city_cost_per_km')} ‚ÇΩ")
    print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ö–ê–î –∑–∞ –∫–º: {pricing.get('outside_cost_per_km')} ‚ÇΩ")
    print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞ –ø–æ –ö–ê–î: {pricing.get('kad_toll_cost')} ‚ÇΩ")
    
    zone_config = pricing.get('zone_detection', {})
    print(f"–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞: {zone_config.get('city_center')}")
    print(f"–†–∞–¥–∏—É—Å –≥–æ—Ä–æ–¥–∞: {zone_config.get('city_radius_km')} –∫–º")
    print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ö–ê–î: {zone_config.get('kad_keywords')}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöõ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π")
    print("=" * 50)
    
    try:
        test_config()
        test_zone_detection()
        test_route_analysis()
        test_pricing()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
