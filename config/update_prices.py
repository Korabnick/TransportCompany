#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""

import json
import argparse
from pathlib import Path
from typing import Dict, Any

def load_config(config_path: Path) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def save_config(config: Dict[str, Any], config_path: Path) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def update_pricing(config: Dict[str, Any], **kwargs) -> Dict[str, Any]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω"""
    if 'pricing' not in config:
        config['pricing'] = {}
    
    pricing = config['pricing']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
    if 'base_cost_per_km' in kwargs:
        pricing['base_cost_per_km'] = float(kwargs['base_cost_per_km'])
        print(f"üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–º: {pricing['base_cost_per_km']} ‚ÇΩ")
    
    if 'duration_cost_per_hour' in kwargs:
        pricing['duration_cost_per_hour'] = float(kwargs['duration_cost_per_hour'])
        print(f"‚è∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å: {pricing['duration_cost_per_hour']} ‚ÇΩ")
    
    if 'urgent_pickup_multiplier' in kwargs:
        pricing['urgent_pickup_multiplier'] = float(kwargs['urgent_pickup_multiplier'])
        print(f"üö® –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–∞—á–∏: {pricing['urgent_pickup_multiplier']}x")
    
    if 'loader_price_per_hour' in kwargs:
        pricing['loader_price_per_hour'] = float(kwargs['loader_price_per_hour'])
        print(f"üë∑ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑—á–∏–∫–∞ –∑–∞ —á–∞—Å: {pricing['loader_price_per_hour']} ‚ÇΩ")
    
    return config

def update_vehicle_prices(config: Dict[str, Any], vehicle_id: int = None, **kwargs) -> Dict[str, Any]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    if 'vehicles' not in config:
        print("‚ùå –°–µ–∫—Ü–∏—è vehicles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return config
    
    vehicles = config['vehicles']
    
    if vehicle_id is not None:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        for vehicle in vehicles:
            if vehicle['id'] == vehicle_id:
                if 'price_per_hour' in kwargs:
                    vehicle['price_per_hour'] = int(kwargs['price_per_hour'])
                    print(f"üöó {vehicle['name']} - —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å: {vehicle['price_per_hour']} ‚ÇΩ")
                
                if 'price_per_km' in kwargs:
                    vehicle['price_per_km'] = int(kwargs['price_per_km'])
                    print(f"üöó {vehicle['name']} - —Ü–µ–Ω–∞ –∑–∞ –∫–º: {vehicle['price_per_km']} ‚ÇΩ")
                
                if 'base_price' in kwargs:
                    vehicle['base_price'] = int(kwargs['base_price'])
                    print(f"üöó {vehicle['name']} - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {vehicle['base_price']} ‚ÇΩ")
                
                break
        else:
            print(f"‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å ID {vehicle_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        for vehicle in vehicles:
            if 'price_per_hour' in kwargs:
                vehicle['price_per_hour'] = int(vehicle['price_per_hour'] * float(kwargs['price_per_hour']))
                print(f"üöó {vehicle['name']} - –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å: {vehicle['price_per_hour']} ‚ÇΩ")
            
            if 'price_per_km' in kwargs:
                vehicle['price_per_km'] = int(vehicle['price_per_km'] * float(kwargs['price_per_km']))
                print(f"üöó {vehicle['name']} - –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–º: {vehicle['price_per_km']} ‚ÇΩ")
            
            if 'base_price' in kwargs:
                vehicle['base_price'] = int(vehicle['base_price'] * float(kwargs['base_price']))
                print(f"üöó {vehicle['name']} - –Ω–æ–≤–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {vehicle['base_price']} ‚ÇΩ")
    
    return config

def update_service_prices(config: Dict[str, Any], **kwargs) -> Dict[str, Any]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥"""
    if 'additional_services' not in config:
        print("‚ùå –°–µ–∫—Ü–∏—è additional_services –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return config
    
    services = config['additional_services']
    
    for service_key, new_price in kwargs.items():
        if service_key in services:
            services[service_key]['price'] = float(new_price)
            print(f"üîß {services[service_key]['name']} - –Ω–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ")
        else:
            print(f"‚ö†Ô∏è  –£—Å–ª—É–≥–∞ {service_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return config

def show_current_prices(config: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"""
    print("\nüìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:")
    print("-" * 40)
    
    if 'pricing' in config:
        pricing = config['pricing']
        print(f"üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–º: {pricing.get('base_cost_per_km', 'N/A')} ‚ÇΩ")
        print(f"‚è∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å: {pricing.get('duration_cost_per_hour', 'N/A')} ‚ÇΩ")
        print(f"üö® –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–∞—á–∏: {pricing.get('urgent_pickup_multiplier', 'N/A')}x")
        print(f"üë∑ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑—á–∏–∫–∞ –∑–∞ —á–∞—Å: {pricing.get('loader_price_per_hour', 'N/A')} ‚ÇΩ")
    
    if 'vehicles' in config:
        print("\nüöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:")
        for vehicle in config['vehicles']:
            print(f"  {vehicle['name']}:")
            print(f"    - –ó–∞ —á–∞—Å: {vehicle['price_per_hour']} ‚ÇΩ")
            print(f"    - –ó–∞ –∫–º: {vehicle['price_per_km']} ‚ÇΩ")
            print(f"    - –ë–∞–∑–æ–≤–∞—è: {vehicle['base_price']} ‚ÇΩ")
    
    if 'additional_services' in config:
        print("\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:")
        for service_key, service in config['additional_services'].items():
            print(f"  {service['name']}: {service['price']} ‚ÇΩ")

def main():
    parser = argparse.ArgumentParser(description='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞')
    parser.add_argument('--config', default='calculator_config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--show', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã')
    
    # –¶–µ–Ω—ã
    parser.add_argument('--base-cost-per-km', type=float, help='–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–º')
    parser.add_argument('--duration-cost-per-hour', type=float, help='–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å')
    parser.add_argument('--urgent-pickup-multiplier', type=float, help='–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–∞—á–∏')
    parser.add_argument('--loader-price-per-hour', type=float, help='–°—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑—á–∏–∫–∞ –∑–∞ —á–∞—Å')
    
    # –¶–µ–Ω—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    parser.add_argument('--vehicle-id', type=int, help='ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤—Å–µ)')
    parser.add_argument('--vehicle-price-per-hour', type=float, help='–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã –∑–∞ —á–∞—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
    parser.add_argument('--vehicle-price-per-km', type=float, help='–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã –∑–∞ –∫–º –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
    parser.add_argument('--vehicle-base-price', type=float, help='–ú–Ω–æ–∂–∏—Ç–µ–ª—å –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
    
    # –¶–µ–Ω—ã —É—Å–ª—É–≥
    parser.add_argument('--service-packaging', type=float, help='–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ "–£–ø–∞–∫–æ–≤–∫–∞"')
    parser.add_argument('--service-insurance', type=float, help='–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"')
    parser.add_argument('--service-loading-equipment', type=float, help='–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ "–ü–æ–≥—Ä—É–∑–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"')
    
    args = parser.parse_args()
    
    config_path = Path(__file__).parent / args.config
    
    if not config_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(config_path)
    if config is None:
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    if args.show:
        show_current_prices(config)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
    pricing_updates = {}
    if args.base_cost_per_km is not None:
        pricing_updates['base_cost_per_km'] = args.base_cost_per_km
    if args.duration_cost_per_hour is not None:
        pricing_updates['duration_cost_per_hour'] = args.duration_cost_per_hour
    if args.urgent_pickup_multiplier is not None:
        pricing_updates['urgent_pickup_multiplier'] = args.urgent_pickup_multiplier
    if args.loader_price_per_hour is not None:
        pricing_updates['loader_price_per_hour'] = args.loader_price_per_hour
    
    if pricing_updates:
        config = update_pricing(config, **pricing_updates)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    vehicle_updates = {}
    if args.vehicle_price_per_hour is not None:
        vehicle_updates['price_per_hour'] = args.vehicle_price_per_hour
    if args.vehicle_price_per_km is not None:
        vehicle_updates['price_per_km'] = args.vehicle_price_per_km
    if args.vehicle_base_price is not None:
        vehicle_updates['base_price'] = args.vehicle_base_price
    
    if vehicle_updates:
        config = update_vehicle_prices(config, args.vehicle_id, **vehicle_updates)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —É—Å–ª—É–≥
    service_updates = {}
    if args.service_packaging is not None:
        service_updates['packaging'] = args.service_packaging
    if args.service_insurance is not None:
        service_updates['insurance'] = args.service_insurance
    if args.service_loading_equipment is not None:
        service_updates['loading_equipment'] = args.service_loading_equipment
    
    if service_updates:
        config = update_service_prices(config, **service_updates)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if save_config(config, config_path):
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API: POST /api/v2/config/reload")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
