#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""

import json
import sys
from pathlib import Path

def validate_config(config_path):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        required_sections = ['pricing', 'vehicles', 'calculator_limits']
        for section in required_sections:
            if section not in config:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è: {section}")
                return False
            print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –Ω–∞–π–¥–µ–Ω–∞")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
        pricing = config['pricing']
        required_prices = ['base_cost_per_km', 'duration_cost_per_hour', 'urgent_pickup_multiplier', 'loader_price_per_hour']
        
        for price_key in required_prices:
            if price_key not in pricing:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞: {price_key}")
                return False
            
            if not isinstance(pricing[price_key], (int, float)):
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ü–µ–Ω—ã {price_key}: {type(pricing[price_key])}")
                return False
            
            if pricing[price_key] < 0:
                print(f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {price_key}: {pricing[price_key]}")
                return False
        
        print("‚úÖ –¶–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        vehicles = config['vehicles']
        if not isinstance(vehicles, list):
            print(f"‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(vehicles)}")
            return False
        
        if len(vehicles) == 0:
            print("‚ùå –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(vehicles)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
        
        required_vehicle_fields = ['id', 'name', 'type', 'body_type', 'price_per_hour', 'price_per_km', 'base_price', 'max_passengers', 'max_loaders', 'dimensions', 'capacity', 'image_url', 'description']
        
        vehicle_ids = set()
        for i, vehicle in enumerate(vehicles):
            print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {i+1}: {vehicle.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for field in required_vehicle_fields:
                if field not in vehicle:
                    print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            vehicle_id = vehicle['id']
            if vehicle_id in vehicle_ids:
                print(f"    ‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID: {vehicle_id}")
                return False
            vehicle_ids.add(vehicle_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(vehicle['price_per_hour'], (int, float)) or vehicle['price_per_hour'] < 0:
                print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å: {vehicle['price_per_hour']}")
                return False
            
            if not isinstance(vehicle['price_per_km'], (int, float)) or vehicle['price_per_km'] < 0:
                print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–º: {vehicle['price_per_km']}")
                return False
            
            if not isinstance(vehicle['base_price'], (int, float)) or vehicle['base_price'] < 0:
                print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {vehicle['base_price']}")
                return False
            
            if not isinstance(vehicle['max_passengers'], int) or vehicle['max_passengers'] < 0:
                print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {vehicle['max_passengers']}")
                return False
            
            if not isinstance(vehicle['max_loaders'], int) or vehicle['max_loaders'] < 0:
                print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑—á–∏–∫–æ–≤: {vehicle['max_loaders']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
            dimensions = vehicle['dimensions']
            if not isinstance(dimensions, dict):
                print(f"    ‚ùå –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
                return False
            
            required_dimensions = ['height', 'length', 'width']
            for dim in required_dimensions:
                if dim not in dimensions:
                    print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ä: {dim}")
                    return False
                
                if not isinstance(dimensions[dim], (int, float)) or dimensions[dim] <= 0:
                    print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä {dim}: {dimensions[dim]}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            if not isinstance(vehicle['capacity'], (int, float)) or vehicle['capacity'] <= 0:
                print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {vehicle['capacity']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = Path(__file__).parent.parent / 'app' / vehicle['image_url'].lstrip('/')
            if not image_path.exists():
                print(f"    ‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {vehicle['image_url']}")
            else:
                print(f"    ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {vehicle['image_url']}")
            
            print(f"    ‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {i+1} –≤–∞–ª–∏–¥–µ–Ω")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤
        limits = config['calculator_limits']
        required_limits = ['max_passengers', 'max_loaders', 'max_duration_hours', 'min_duration_hours']
        
        for limit_key in required_limits:
            if limit_key not in limits:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç: {limit_key}")
                return False
            
            if not isinstance(limits[limit_key], int) or limits[limit_key] < 0:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç {limit_key}: {limits[limit_key]}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ª–∏–º–∏—Ç–æ–≤
        if limits['min_duration_hours'] >= limits['max_duration_hours']:
            print(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π: {limits['min_duration_hours']} >= {limits['max_duration_hours']}")
            return False
        
        print("‚úÖ –õ–∏–º–∏—Ç—ã –≤–∞–ª–∏–¥–Ω—ã")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if 'additional_services' in config:
            services = config['additional_services']
            if isinstance(services, dict):
                for service_key, service_data in services.items():
                    if not isinstance(service_data, dict):
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Å–ª—É–≥–∏ {service_key}")
                        continue
                    
                    if 'name' not in service_data or 'price' not in service_data:
                        print(f"‚ùå –£—Å–ª—É–≥–∞ {service_key} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                        continue
                    
                    if not isinstance(service_data['price'], (int, float)) or service_data['price'] < 0:
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —É—Å–ª—É–≥–∏ {service_key}: {service_data['price']}")
                        continue
                    
                    print(f"‚úÖ –£—Å–ª—É–≥–∞ {service_key} –≤–∞–ª–∏–¥–Ω–∞")
        
        print("\nüéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–Ω–∞!")
        return True
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    config_path = Path(__file__).parent / 'calculator_config.json'
    
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
    print(f"üìÅ –§–∞–π–ª: {config_path}")
    print("-" * 50)
    
    if validate_config(config_path):
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()
