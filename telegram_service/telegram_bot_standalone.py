#!/usr/bin/env python3
"""
–û—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Flask
"""

import os
import logging
import asyncio
import json
from datetime import datetime
from typing import Dict, Any, Optional
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import TelegramError, NetworkError, TimedOut
import threading
from queue import Queue
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBotService:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Ç—ã"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        # –ß–∞—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        # –ß–∞—Ç –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        self.urgent_chat_id = os.getenv('TELEGRAM_URGENT_CHAT_ID')
        # –ß–∞—Ç –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω
        self.callback_chat_id = os.getenv('TELEGRAM_CALLBACK_CHAT_ID')
        
        self.bot = None
        self.application = None
        self.is_running = False
        self.message_queue = Queue()
        self.worker_thread = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
            
        if not self.chat_id:
            logger.error("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
            
        try:
            self.bot = Bot(token=self.bot_token)
            self.application = Application.builder().token(self.bot_token).build()
            self._setup_handlers()
            logger.info("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–û–±—ã—á–Ω—ã–µ –∑–∞—è–≤–∫–∏: {self.chat_id}")
            logger.info(f"–°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏: {self.urgent_chat_id}")
            logger.info(f"–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω: {self.callback_chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞: {e}")
            self.bot = None
            self.application = None
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        if not self.application:
            return
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self._start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("status", self._status_command))
        self.application.add_handler(CommandHandler("ping", self._ping_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self._button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç "–ü—Ä–æ—Ñ.–≠–∫–∏–ø–∞–∂"!

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∞—Ç—ã:
‚Ä¢ –û–±—ã—á–Ω—ã–µ –∑–∞—è–≤–∫–∏
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏  
‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω
        """
        await update.message.reply_text(welcome_text)
        
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:

/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∞—Ç—ã:
‚Ä¢ –û–±—ã—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ - –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ - —á–∞—Ç –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω - —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–∑–≤–æ–Ω–æ–≤

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_text)
        
    async def _status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            bot_info = await self.bot.get_me()
            status_text = f"""
ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>

‚úÖ <b>–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω</b>
üë§ –ò–º—è: {bot_info.first_name}
üîó Username: @{bot_info.username}
üÜî ID: {bot_info.id}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üì® –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.message_queue.qsize()}
üîÑ –°—Ç–∞—Ç—É—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if self.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

üí¨ <b>–ß–∞—Ç—ã:</b>
‚Ä¢ –û–±—ã—á–Ω—ã–µ –∑–∞—è–≤–∫–∏: {'‚úÖ' if self.chat_id else '‚ùå'}
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏: {'‚úÖ' if self.urgent_chat_id else '‚ùå'}
‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω: {'‚úÖ' if self.callback_chat_id else '‚ùå'}
            """
            await update.message.reply_text(status_text, parse_mode='HTML')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        
    async def _ping_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
        try:
            start_time = time.time()
            bot_info = await self.bot.get_me()
            ping_time = (time.time() - start_time) * 1000
            
            ping_text = f"""
üèì <b>Pong!</b>

‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {ping_time:.1f}ms
ü§ñ –ë–æ—Ç: {bot_info.first_name}
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
            """
            await update.message.reply_text(ping_text, parse_mode='HTML')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ ping: {str(e)}")
        
    async def _button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            data = query.data
            if data.startswith('order_'):
                await self._handle_order_action(query, context)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è")
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    async def _handle_order_acceptance(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏"""
        try:
            order_id = query.data.split('_')[1]
            await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ {order_id} –ø—Ä–∏–Ω—è—Ç–∞")
            logger.info(f"–ó–∞—è–≤–∫–∞ {order_id} –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏")
    
    async def _handle_order_rejection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        try:
            order_id = query.data.split('_')[1]
            await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            logger.info(f"–ó–∞—è–≤–∫–∞ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
    
    async def _handle_order_action(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏"""
        try:
            parts = query.data.split('_')
            if len(parts) >= 3:
                order_id = parts[1]
                action = parts[2]
                
                if action == 'accept':
                    await self._handle_order_acceptance(query, context)
                elif action == 'reject':
                    await self._handle_order_rejection(query, context)
                elif action == 'process':
                    await query.edit_message_text(f"üîÑ –ó–∞—è–≤–∫–∞ {order_id} –≤–∑—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É")
                    logger.info(f"–ó–∞—è–≤–∫–∞ {order_id} –≤–∑—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
                else:
                    await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è")
    
    def _format_order_message(self, order_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
            order_type = order_data.get('order_type', 'regular')
            
            if order_type == 'callback':
                return self._format_callback_message(order_data)
            elif order_type == 'urgent':
                return self._format_urgent_message(order_data)
            else:
                return self._format_regular_message(order_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}"
    
    def _format_regular_message(self, order_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        customer_name = order_data.get('customer_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        customer_phone = order_data.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        from_address = order_data.get('from_address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        to_address = order_data.get('to_address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        pickup_time = order_data.get('pickup_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        duration_hours = order_data.get('duration_hours', 1)
        passengers = order_data.get('passengers', 0)
        loaders = order_data.get('loaders', 0)
        selected_vehicle = order_data.get('selected_vehicle', {})
        total_cost = order_data.get('total_cost', 0)
        order_notes = order_data.get('order_notes', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏
        if pickup_time and pickup_time != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            try:
                pickup_dt = datetime.fromisoformat(pickup_time.replace('Z', '+00:00'))
                pickup_formatted = pickup_dt.strftime('%d.%m.%Y –≤ %H:%M')
            except:
                pickup_formatted = pickup_time
        else:
            pickup_formatted = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üöõ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ì–†–£–ó–û–ü–ï–†–ï–í–û–ó–ö–£</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {customer_name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
‚Ä¢ –û—Ç–∫—É–¥–∞: {from_address}
‚Ä¢ –ö—É–¥–∞: {to_address}

‚è∞ <b>–í—Ä–µ–º—è:</b>
‚Ä¢ –ü–æ–¥–∞—á–∞: {pickup_formatted}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á.

üöó <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</b>
‚Ä¢ –¢–∏–ø: {selected_vehicle.get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω')}
‚Ä¢ –ü–∞—Å—Å–∞–∂–∏—Ä—ã: {passengers}
‚Ä¢ –ì—Ä—É–∑—á–∏–∫–∏: {loaders}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost:,.0f} ‚ÇΩ

üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
{order_notes if order_notes else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> {order_data.get('id', 'new')}
‚è∞ <b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        return message.strip()
    
    def _format_urgent_message(self, order_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        customer_name = order_data.get('customer_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        customer_phone = order_data.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        from_address = order_data.get('from_address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        to_address = order_data.get('to_address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        pickup_time = order_data.get('pickup_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        duration_hours = order_data.get('duration_hours', 1)
        passengers = order_data.get('passengers', 0)
        loaders = order_data.get('loaders', 0)
        selected_vehicle = order_data.get('selected_vehicle', {})
        total_cost = order_data.get('total_cost', 0)
        order_notes = order_data.get('order_notes', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏
        if pickup_time and pickup_time != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            try:
                pickup_dt = datetime.fromisoformat(pickup_time.replace('Z', '+00:00'))
                pickup_formatted = pickup_dt.strftime('%d.%m.%Y –≤ %H:%M')
            except:
                pickup_formatted = pickup_time
        else:
            pickup_formatted = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ä–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏
        message = f"""
üö® <b>–°–†–û–ß–ù–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ì–†–£–ó–û–ü–ï–†–ï–í–û–ó–ö–£</b> üö®

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {customer_name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
‚Ä¢ –û—Ç–∫—É–¥–∞: {from_address}
‚Ä¢ –ö—É–¥–∞: {to_address}

‚è∞ <b>–í—Ä–µ–º—è:</b>
‚Ä¢ –ü–æ–¥–∞—á–∞: {pickup_formatted}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á.

üöó <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</b>
‚Ä¢ –¢–∏–ø: {selected_vehicle.get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω')}
‚Ä¢ –ü–∞—Å—Å–∞–∂–∏—Ä—ã: {passengers}
‚Ä¢ –ì—Ä—É–∑—á–∏–∫–∏: {loaders}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost:,.0f} ‚ÇΩ

üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
{order_notes if order_notes else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> {order_data.get('id', 'new')}
‚è∞ <b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        return message.strip()
    
    def _format_callback_message(self, order_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω"""
        customer_name = order_data.get('customer_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        customer_phone = order_data.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        message = f"""
üìû <b>–ó–ê–Ø–í–ö–ê –ù–ê –ü–ï–†–ï–ó–í–û–ù</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {customer_name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}

‚è∞ <b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üí¨ <b>–¢–∏–ø –∑–∞—è–≤–∫–∏:</b> –ü–µ—Ä–µ–∑–≤–æ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 8 —Å–µ–∫—É–Ω–¥
        """
        
        return message.strip()
    
    async def _send_message_with_retry(self, message: str, order_id: str, chat_id: str, max_retries: int = 3) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"order_{order_id}_accept"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_{order_id}_reject")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data=f"order_{order_id}_process")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                result = await self.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}, message_id: {result.message_id}")
                return True
                
            except (NetworkError, TimedOut) as e:
                logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                return False
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                return False
        
        return False
    
    async def send_order_notification(self, order_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            bot_info = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bot_info.first_name} (@{bot_info.username})")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            message = self._format_order_message(order_data)
            order_id = order_data.get('id', 'new')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            order_type = order_data.get('order_type', 'regular')
            
            if order_type == 'callback':
                chat_id = self.callback_chat_id or self.chat_id
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω –≤ —á–∞—Ç: {chat_id}")
            elif order_type == 'urgent':
                chat_id = self.urgent_chat_id or self.chat_id
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç: {chat_id}")
            else:
                chat_id = self.chat_id
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–π –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç: {chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            return await self._send_message_with_retry(message, order_id, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def queue_order_notification(self, order_data: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            self.message_queue.put(order_data)
            logger.info(f"–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.message_queue.qsize()}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
    
    async def _message_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    order_data = self.message_queue.get(timeout=1)
                except:
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await self.send_order_notification(order_data)
                
                if success:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.message_queue.task_done()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await asyncio.sleep(1)
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        if self.is_running:
            logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.bot_token).build()
            self._setup_handlers()
            
            await self.application.initialize()
            await self.application.start()
            
            self.is_running = True
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            asyncio.create_task(self._message_worker())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True,
                close_loop=False,
                stop_signals=None
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.is_running = False
            raise
            
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self.is_running:
            logger.info("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        try:
            self.is_running = False
            
            if self.application and self.application.running:
                await self.application.stop()
                await self.application.shutdown()
            
            logger.info("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramBotService()

def send_order_to_telegram(order_data: Dict[str, Any]) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        return telegram_service.queue_order_notification(order_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        return False 