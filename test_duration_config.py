#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def test_config_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from config_manager import config_manager
        
        print("‚úÖ Config manager imported successfully")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
        limits = config_manager.get_calculator_limits()
        print(f"‚úÖ Calculator limits loaded: {limits}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        min_duration = limits.get('min_duration_hours')
        max_duration = limits.get('max_duration_hours')
        
        print(f"‚úÖ Duration limits:")
        print(f"   Min: {min_duration} hours")
        print(f"   Max: {max_duration} hours")
        
        if min_duration and max_duration:
            if min_duration < max_duration:
                print("‚úÖ Duration limits are valid (min < max)")
            else:
                print("‚ùå Duration limits are invalid (min >= max)")
        else:
            print("‚ùå Duration limits are missing")
            
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_config_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_path = os.path.join(os.path.dirname(__file__), 'config', 'calculator_config.json')
    
    if not os.path.exists(config_path):
        print(f"‚ùå Config file not found: {config_path}")
        return False
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("‚úÖ Config file loaded successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if 'calculator_limits' not in config:
            print("‚ùå 'calculator_limits' section missing")
            return False
        
        limits = config['calculator_limits']
        
        if 'min_duration_hours' not in limits:
            print("‚ùå 'min_duration_hours' missing")
            return False
            
        if 'max_duration_hours' not in limits:
            print("‚ùå 'max_duration_hours' missing")
            return False
        
        min_duration = limits['min_duration_hours']
        max_duration = limits['max_duration_hours']
        
        print(f"‚úÖ Config file duration limits:")
        print(f"   Min: {min_duration} hours")
        print(f"   Max: {max_duration} hours")
        
        if min_duration < max_duration:
            print("‚úÖ Duration limits are valid (min < max)")
        else:
            print("‚ùå Duration limits are invalid (min >= max)")
            
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON decode error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error reading config: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ Testing Duration Configuration")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n1. Testing config file...")
    config_ok = test_config_file()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ config manager
    print("\n2. Testing config manager...")
    manager_ok = test_config_loading()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if config_ok and manager_ok:
        print("üéâ All tests passed! Duration configuration is working correctly.")
        return 0
    else:
        print("‚ùå Some tests failed. Please check the configuration.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
